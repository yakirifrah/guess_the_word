{"version":3,"sources":["components/Shared/Header/index.js","components/Shared/Button/index.js","components/Shared/Form/Form.js","components/Shared/Form/Input.js","containers/IntroPage/index.js","store/actions/actionTypes.js","store/actions/index.js","helpers/index.js","lib/dictionary.js","containers/GamePlayPage/index.js","constants/game.js","containers/GameOverPage/index.js","components/Table/index.js","containers/ScoreTablePage/index.js","containers/App/index.js","constants/routes.js","reportWebVitals.js","store/utility.js","store/reducers/app.js","store/reducers/index.js","index.js"],"names":["Header","title","size","className","memo","prevProps","nextProps","Button","forwardRef","btnRef","label","handleOnClick","onClick","ref","Form","props","onSubmit","handleSubmit","children","Input","type","style","handleChange","index","name","maxLength","placeholder","htmlFor","onChange","e","IntroPage","scoreTable","useSelector","state","app","useState","length","reduce","prev","curr","score","playerWithHighestScore","history","useHistory","preventDefault","push","from","GENERATE_RANDOM_WORD","CHECK_GUESS_WORD","SAVE_DATA_SCORE_PLAYER","RESET_LIFE_PLAYER","insertDataToTableScore","phoneNumber","actionTypes","payload","scorePlayer","generateKey","pre","uuidv4","dictionary","category","words","GamePlayPage","location","dispatch","useDispatch","word","lifePlayerPoints","victoryPlayerPoints","lettersArray","setLettersArray","resetTimer","setResetTimer","useRef","wordGuess","current","useEffect","msg","randomCategoryIndex","Math","floor","random","randomCategory","copyWords","randomWordIndex","randomWord","generateRandomWord","arrIndexOfMissingLetters","randomIndex","includes","splice","getIndexOfMissingLetters","disabled","Array","map","prevState","target","value","match","RegExp","focusNextChar","copyWordGuess","checkIfGuessAllLetters","nextEl","nextElementSibling","localName","focus","letter","playerGuessWord","join","isPlayerGuessCorrect","toLowerCase","checkIfPlayerGuessTheWord","isPlaying","duration","colors","onComplete","remainingTime","GameOverPage","useForm","register","errors","requestToInsertScoreTableFulfilled","data","myCurrentScore","findIndex","obj","required","minLength","pattern","_","get","Table","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","ScoreTablePage","useMemo","accessor","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","updateObject","oldObject","updatedProperties","initialState","JSON","parse","localStorage","getItem","action","insertScorePlayerIntoScoreTable","hasOwnProperty","copyScoreTable","setItem","stringify","resetLifePlayer","appReducer","store","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5e86fe4.chunk.js","sourcesContent":["import { memo } from 'react';\r\nimport './style.scss';\r\n\r\nconst Header = ({ title, size }) => {\r\n  return (\r\n    <div className=\"Header\">\r\n      <h1 className={`Header__${size}`}>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\nexport default memo(Header, (prevProps, nextProps) => {\r\n  return prevProps.title === nextProps.title;\r\n});\r\n","import { forwardRef } from 'react';\r\nimport './style.scss';\r\n\r\nconst Button = forwardRef(({ label, className, handleOnClick }, btnRef) => (\r\n  <div className=\"Button\">\r\n    <button className={className + ' btn'} onClick={handleOnClick} ref={btnRef}>\r\n      {label}\r\n    </button>\r\n  </div>\r\n));\r\n\r\nexport default Button;\r\n","import './style.scss';\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit(props.onSubmit)} className=\"Form\">\r\n      {props.children}\r\n    </form>\r\n  );\r\n};\r\nexport default Form;\r\n","import { forwardRef } from 'react';\r\nimport './style.scss';\r\n\r\nconst Input = forwardRef(\r\n  (\r\n    { type, style, handleChange = null, index = null, name, maxLength = null, label = null, placeholder = null },\r\n    ref,\r\n  ) => {\r\n    return (\r\n      <>\r\n        {label && <label htmlFor={name}>{label}</label>}\r\n        <input\r\n          className={`Input ${style} u-mr-4`}\r\n          type={type}\r\n          maxLength={maxLength}\r\n          onChange={handleChange ? (e) => handleChange(e, index) : null}\r\n          ref={ref}\r\n          placeholder={placeholder}\r\n          name={name}\r\n        />\r\n      </>\r\n    );\r\n  },\r\n);\r\nexport default Input;\r\n","import { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { Header, Button } from '../../components/Shared';\r\nimport './style.scss';\r\n\r\nconst IntroPage = () => {\r\n  const { scoreTable } = useSelector((state) => state.app);\r\n  const getPlayerWithHighestScore = () => {\r\n    if (!scoreTable.length) {\r\n      return null;\r\n    }\r\n    return scoreTable.reduce((prev, curr) => (prev.score > curr.score ? prev : curr));\r\n  };\r\n  const [playerWithHighestScore] = useState(() => getPlayerWithHighestScore());\r\n  const history = useHistory();\r\n  const startNewGame = (e) => {\r\n    e.preventDefault();\r\n    history.push('/game', { from: 'IntroPage' });\r\n  };\r\n  return (\r\n    <>\r\n      <Header title=\"Guess the word\" size=\"xlg\" />\r\n      {scoreTable.length > 0 && (\r\n        <div className=\"maximum_score\">\r\n          <Header title={'The player with maximum points: '} />\r\n          <h2>{playerWithHighestScore?.name}</h2>\r\n          <h2>{playerWithHighestScore?.score}</h2>\r\n        </div>\r\n      )}\r\n\r\n      <Button className={'start_new_game'} label=\"Start new game\" handleOnClick={startNewGame} />\r\n    </>\r\n  );\r\n};\r\nexport default IntroPage;\r\n","export const GENERATE_RANDOM_WORD = 'GENERATE_RANDOM_WORD';\r\nexport const CHECK_GUESS_WORD = 'CHECK_GUESS_WORD';\r\nexport const SAVE_DATA_SCORE_PLAYER = 'SAVE_DATA_SCORE_PLAYER';\r\nexport const RESET_LIFE_PLAYER = 'RESET_LIFE_PLAYER';\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const generateRandomWord = (dictionary = {}) => {\r\n  if (!dictionary.length) {\r\n    return {\r\n      type: actionTypes.GENERATE_RANDOM_WORD,\r\n      payload: {\r\n        msg: 'You have successfully completed the game, there are no more words to guess',\r\n      },\r\n    };\r\n  }\r\n\r\n  const randomCategoryIndex = Math.floor(Math.random() * dictionary.length);\r\n  const randomCategory = dictionary[randomCategoryIndex].category;\r\n  const copyWords = [...dictionary[randomCategoryIndex].words];\r\n  const randomWordIndex = Math.floor(Math.random() * copyWords.length);\r\n  const randomWord = copyWords[randomWordIndex];\r\n  return {\r\n    type: actionTypes.GENERATE_RANDOM_WORD,\r\n    payload: {\r\n      word: randomWord,\r\n      category: randomCategory,\r\n    },\r\n  };\r\n};\r\nexport const checkIfPlayerGuessTheWord = (playerGuessWord, word) => {\r\n  return {\r\n    type: actionTypes.CHECK_GUESS_WORD,\r\n    payload: {\r\n      isPlayerGuessCorrect: playerGuessWord.toLowerCase() === word.toLowerCase(),\r\n    },\r\n  };\r\n};\r\n\r\nexport const insertDataToTableScore = ({ name, phoneNumber, score }, index = -1) => {\r\n  if (index !== -1) {\r\n    return {\r\n      type: actionTypes.SAVE_DATA_SCORE_PLAYER,\r\n      payload: {\r\n        index,\r\n        scorePlayer: { name, phoneNumber, score },\r\n      },\r\n    };\r\n  }\r\n  return {\r\n    type: actionTypes.SAVE_DATA_SCORE_PLAYER,\r\n    payload: {\r\n      scorePlayer: { name, phoneNumber, score },\r\n    },\r\n  };\r\n};\r\n\r\nexport const resetLifePlayer=()=>({\r\n  type: actionTypes.RESET_LIFE_PLAYER,\r\n})\r\n","import { v4 as uuidv4 } from 'uuid';\r\nexport function getIndexOfMissingLetters(word) {\r\n  let arrIndexOfMissingLetters = [];\r\n\r\n  while (arrIndexOfMissingLetters.length !== Math.floor(word.length / 2)) {\r\n    let randomIndex = Math.floor(Math.random() * word.length);\r\n    if (arrIndexOfMissingLetters.includes(randomIndex)) {\r\n      arrIndexOfMissingLetters.splice(randomIndex, 1);\r\n    } else {\r\n      arrIndexOfMissingLetters.push(randomIndex);\r\n    }\r\n  }\r\n  return arrIndexOfMissingLetters;\r\n}\r\n\r\nexport function generateKey(pre) {\r\n  return `${pre}-${uuidv4()}`;\r\n}\r\n","const dictionary = [\r\n  {\r\n    category: 'Pets',\r\n    words: ['Dog', 'Cat', 'Hamster', 'Turtle', 'Parrot', 'Rabbit'],\r\n  },\r\n  {\r\n    category: 'Animals',\r\n    words: [\r\n      'Lion',\r\n      'Camel',\r\n      'Elephant',\r\n      'Giraffe',\r\n      'Zebra',\r\n      'Rhino',\r\n      'Hippo',\r\n      'Antelope',\r\n      'Hyena',\r\n      'Scorpion',\r\n      'Baboon',\r\n      'Gorilla',\r\n      'Chimpanzee',\r\n      'Constrictor',\r\n    ],\r\n  },\r\n  {\r\n    category: 'Colors',\r\n    words: [\r\n      'Red',\r\n      'Green',\r\n      'Black',\r\n      'Blue',\r\n      'Yellow',\r\n      'White',\r\n      'Grey',\r\n      'Pink',\r\n      'Orange',\r\n      'Purple',\r\n      'Brown',\r\n      'Violet',\r\n      'Turquoise',\r\n    ],\r\n  },\r\n  {\r\n    category: 'Sports',\r\n    words: ['Soccer', 'Basketball', 'Handball', 'Volleyball', 'Triathlon'],\r\n  },\r\n  {\r\n    category: 'Food',\r\n    words: ['Pasta', 'Pizza', 'Lasagne', 'Meatballs', 'Hamburger', 'Couscous', 'Sushi'],\r\n  },\r\n  {\r\n    category: 'Programming languages',\r\n    words: ['JavaScript', 'Java', 'Python', 'assembly', 'Ruby', 'Swift', 'Kotlin', 'Sql', 'Php'],\r\n  },\r\n  {\r\n    category: 'Drinks',\r\n    words: ['Lemonade', 'Tea', 'Coffee', 'Milk', 'Water', 'Beer', 'Whiskey'],\r\n  },\r\n];\r\n\r\nexport default dictionary;\r\n","import { useEffect, useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { generateRandomWord, checkIfPlayerGuessTheWord } from '../../store/actions';\r\nimport { Header, Button } from '../../components/Shared';\r\nimport { getIndexOfMissingLetters, generateKey } from '../../helpers';\r\nimport { Input } from '../../components/Shared/Form';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\n\r\nimport { TIMER_FOR_EACH_LEVEL } from '../../constants/game';\r\nimport dictionary from '../../lib/dictionary';\r\n\r\nimport './style.scss';\r\n\r\nconst GamePlayPage = ({ location }) => {\r\n  const dispatch = useDispatch();\r\n  const { category, word, lifePlayerPoints, victoryPlayerPoints } = useSelector((state) => state.app);\r\n  const [lettersArray, setLettersArray] = useState([]);\r\n  const [resetTimer,setResetTimer]=useState(0);\r\n  const btnRef = useRef();\r\n  const wordGuess = useRef([]);\r\n  const history = useHistory();\r\n  wordGuess.current = lettersArray;\r\n\r\n  useEffect(() => {\r\n    const {\r\n      payload: { word },\r\n    } = dispatch(generateRandomWord(dictionary));\r\n    const arrIndexOfMissingLetters = getIndexOfMissingLetters(word);\r\n    btnRef.current.disabled = true;\r\n    setLettersArray(Array.from(word).map((word, index) => (arrIndexOfMissingLetters.includes(index) ? null : word)));\r\n    setResetTimer(prevState=>prevState+1);\r\n  }, [victoryPlayerPoints, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (lifePlayerPoints === 0) {\r\n      return history.push('/game-over');\r\n    }\r\n  }, [history, lifePlayerPoints]);\r\n\r\n  const handleChange = ({ target }, index) => {\r\n    if (target.value.match(RegExp('^[a-zA-Z]$'))) {\r\n      focusNextChar(target);\r\n    } else {\r\n      target.value = null;\r\n    }\r\n    const copyWordGuess = [...wordGuess.current];\r\n    copyWordGuess[index] = target.value === '' ? null : target.value;\r\n    wordGuess.current = copyWordGuess;\r\n    checkIfGuessAllLetters();\r\n  };\r\n\r\n  const focusNextChar = (target) => {\r\n    let nextEl = target.nextElementSibling;\r\n    while (nextEl !== null) {\r\n      if (nextEl.localName === 'input') break;\r\n      else {\r\n        nextEl = nextEl.nextElementSibling;\r\n      }\r\n    }\r\n    if (nextEl !== null) {\r\n      nextEl.focus();\r\n    }\r\n  };\r\n\r\n  const handleOnClick = (e) => {\r\n    e.preventDefault();\r\n    const playerGuessWord = wordGuess.current.join('');\r\n    dispatch(checkIfPlayerGuessTheWord(playerGuessWord, word));\r\n  };\r\n\r\n  const checkIfGuessAllLetters = () => {\r\n    btnRef.current.disabled = wordGuess.current.includes(null);\r\n    if (!wordGuess.current.includes(null)) btnRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header title={category} />\r\n      <div className=\"Game\">\r\n        <div className=\"Game__guess-word\">\r\n          {lettersArray.map((letter, index) => {\r\n            if (letter) {\r\n              return (\r\n                <h2 className=\"letter u-mr-4\" key={generateKey('h2')}>\r\n                  {letter}\r\n                </h2>\r\n              );\r\n            } else {\r\n              return (\r\n                <Input\r\n                  key={generateKey('input')}\r\n                  type=\"text\"\r\n                  style={`single__character`}\r\n                  handleChange={handleChange}\r\n                  index={index}\r\n                  name=\"letter\"\r\n                  maxLength={'1'}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n        <div className=\"check_guess\">\r\n          <Button label=\"Check the guess\" handleOnClick={handleOnClick} ref={btnRef} className=\"check_guess\" />\r\n        </div>\r\n        <footer className=\"Footer\">\r\n          <div className=\"Counter_timer\">\r\n            <CountdownCircleTimer\r\n                isPlaying\r\n                key={resetTimer}\r\n                duration={TIMER_FOR_EACH_LEVEL}\r\n                colors={[\r\n                  ['#004777', 0.33],\r\n                  ['#F7B801', 0.33],\r\n                  ['#A30000', 0.33],\r\n\r\n                ]}\r\n                size={90}\r\n                onComplete={()=>{\r\n                  history.push('/game-over');\r\n                }}\r\n            >\r\n              {({ remainingTime }) => remainingTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n\r\n          <div className=\"GuessesLeft\">\r\n            <div className=\"GuessesLeft__header\">\r\n              <h6 className=\"text\">Life: {lifePlayerPoints}</h6>\r\n            </div>\r\n          </div>\r\n          <div className=\"VictoryPoint\">\r\n            <div className=\"VictoryPoint__header\">\r\n              <h6 className=\"text\">points: {victoryPlayerPoints}</h6>\r\n            </div>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default GamePlayPage;\r\n","export const LIFE_PLAYER_POINTS = 3;\r\nexport const TIMER_FOR_EACH_LEVEL = 30;\r\n","import { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport _ from 'lodash/fp';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Form, Input, Header } from '../../components/Shared';\r\nimport { insertDataToTableScore } from '../../store/actions';\r\nimport './stlye.scss';\r\n\r\nconst GameOverPage = () => {\r\n  let { register, handleSubmit, errors } = useForm();\r\n  const { scoreTable, victoryPlayerPoints, requestToInsertScoreTableFulfilled } = useSelector((state) => state.app);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (requestToInsertScoreTableFulfilled) {\r\n      history.push('/score-table');\r\n    }\r\n  }, [history, requestToInsertScoreTableFulfilled]);\r\n  const onSubmit = (data) => {\r\n    if (victoryPlayerPoints === 0) return history.push('/score-table');\r\n    data = { ...data, score: victoryPlayerPoints };\r\n    const { name, phoneNumber, score: myCurrentScore } = data;\r\n    if (!scoreTable.length) return dispatch(insertDataToTableScore(data));\r\n    const index = scoreTable.findIndex((obj) => obj.name === name && obj.phoneNumber === phoneNumber);\r\n    if (index !== -1) {\r\n      const { score } = scoreTable[index];\r\n      if (myCurrentScore > score) {\r\n        return dispatch(insertDataToTableScore(data, index));\r\n      } else {\r\n        return history.push('/score-table');\r\n      }\r\n    }\r\n    return dispatch(insertDataToTableScore(data));\r\n  };\r\n\r\n  return (\r\n    <div className=\"GameOver\">\r\n      <Header title=\"Game Over\" size=\"xlg\" />\r\n      <Form handleSubmit={handleSubmit} onSubmit={onSubmit}>\r\n        <Input\r\n          ref={register({ required: true, maxLength: 20, minLength: 2, pattern: /^[a-zA-Z].*[\\s.]*$/g })}\r\n          name=\"name\"\r\n          style={`form`}\r\n          label=\"Full Name\"\r\n        />\r\n        {_.get('name.type', errors) === 'required' && <p className=\"error__input\">This field is required</p>}\r\n        {_.get('name.type', errors) === 'minLength' && (\r\n          <p className=\"error__input\">This name must be contain at least two chars</p>\r\n        )}\r\n        {_.get('name.type', errors) === 'maxLength' && (\r\n          <p className=\"error__input\">First name can not exceed 20 characters</p>\r\n        )}\r\n        <Input\r\n          ref={register({ required: true, minLength: 10, maxLength: 10, pattern: /^[0-9]+$/i })}\r\n          name=\"phoneNumber\"\r\n          style={`form`}\r\n          label=\"Phone Number\"\r\n        />\r\n        {_.get('phoneNumber.type', errors) === 'maxLength' && (\r\n          <p className=\"error__input\">The phone number field must be contain 10 numbers</p>\r\n        )}\r\n        {_.get('phoneNumber.type', errors) === 'minLength' && (\r\n          <p className=\"error__input\">The phone number field must be contain 10 numbers</p>\r\n        )}\r\n        {_.get('phoneNumber.type', errors) === 'required' && <p className=\"error__input\">This field is required</p>}\r\n        {_.get('phoneNumber.type', errors) === 'pattern' && <p className=\"error__input\">Numbers characters only</p>}\r\n        <Input type=\"submit\" style={`submit u-mt-20`} />\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOverPage;\r\n","import { useTable, useSortBy } from 'react-table';\r\nimport './style.scss';\r\nconst Table = ({ columns, data }) => {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy,\r\n  );\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                  {column.render('Header')}\r\n                  <span>{column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}</span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\nexport default Table;\r\n","import { useMemo } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {resetLifePlayer} from '../../store/actions';\r\nimport { Table, Header, Button } from '../../components';\r\nimport './style.scss';\r\n\r\nconst ScoreTablePage = () => {\r\n  const { scoreTable } = useSelector((state) => state.app);\r\nconst dispatch=useDispatch();\r\n  const history = useHistory();\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name',\r\n      },\r\n      {\r\n        Header: 'Phone number',\r\n        accessor: 'phoneNumber',\r\n      },\r\n      {\r\n        Header: 'Score',\r\n        accessor: 'score',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n  const handleOnClick = () => {\r\n      dispatch(resetLifePlayer());\r\n   return history.push('/game', { from: 'TableScorePage' });\r\n  };\r\n\r\n  return (\r\n    <div className=\"ScoreTable\">\r\n      <Header title={'Score table'} />\r\n      {!scoreTable.length ? <Header title={'No information display'} /> : <Table columns={columns} data={scoreTable} />}\r\n      <Button label={'Play again'} className={'play_again'} handleOnClick={handleOnClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScoreTablePage;\r\n","import './style.scss';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport IntroPage from '../IntroPage';\r\nimport GamePlayPage from '../GamePlayPage';\r\nimport GameOverPage from '../GameOverPage';\r\nimport ScoreTablePage from '../ScoreTablePage';\r\nimport * as routes from '../../constants/routes';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={routes.HOME} component={IntroPage} />\r\n          <Route path={routes.GAME_PAGE} component={GamePlayPage} />\r\n          <Route path={routes.GAME_OVER_PAGE} component={GameOverPage} />\r\n          <Route path={routes.SCORE_TABLE_page} component={ScoreTablePage} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const HOME = '/';\r\nexport const GAME_PAGE = '/game';\r\nexport const GAME_OVER_PAGE = '/game-over';\r\nexport const SCORE_TABLE_page = '/score-table';\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\nimport dictionary from '../../lib/dictionary';\r\nimport { LIFE_PLAYER_POINTS } from '../../constants/game';\r\nconst initialState = {\r\n  dictionary,\r\n  word: '',\r\n  category: '',\r\n  msg: '',\r\n  lifePlayerPoints: LIFE_PLAYER_POINTS,\r\n  victoryPlayerPoints: 0,\r\n  isPlayerGuessCorrect: false,\r\n  scoreTable: JSON.parse(localStorage.getItem('scoreTable')) || [],\r\n  scorePlayer: { name: null, phoneNumber: null, score: null },\r\n  requestToInsertScoreTableFulfilled: false,\r\n};\r\n\r\nconst generateRandomWord = (state, action) => {\r\n  return updateObject(state, {\r\n    ...action.payload,\r\n  });\r\n};\r\n\r\nconst checkIfPlayerGuessTheWord = (state, action) => {\r\n  if (action.payload.isPlayerGuessCorrect) {\r\n    return updateObject(state, {\r\n      victoryPlayerPoints: state.victoryPlayerPoints + 1,\r\n    });\r\n  }\r\n  return updateObject(state, {\r\n    lifePlayerPoints: state.lifePlayerPoints - 1,\r\n  });\r\n};\r\n\r\nconst insertScorePlayerIntoScoreTable = (state, action) => {\r\n  if (action.payload.hasOwnProperty('index')) {\r\n    const copyScoreTable = [...state.scoreTable];\r\n    const { score } = action.payload.scorePlayer;\r\n    const { index } = action.payload;\r\n    copyScoreTable[index] = { ...copyScoreTable[index], score };\r\n    localStorage.setItem('scoreTable', JSON.stringify([...copyScoreTable]));\r\n\r\n    return updateObject(state, {\r\n      scoreTable: [...copyScoreTable],\r\n      requestToInsertScoreTableFulfilled: true,\r\n    });\r\n  }\r\n\r\n  localStorage.setItem('scoreTable', JSON.stringify([...state.scoreTable, action.payload.scorePlayer]));\r\n  return updateObject(state, {\r\n    scoreTable: [...state.scoreTable, action.payload.scorePlayer],\r\n    requestToInsertScoreTableFulfilled: true,\r\n  });\r\n};\r\n\r\nconst resetLifePlayer=(state,action)=>{\r\n  return updateObject(state,{\r\n    lifePlayerPoints:LIFE_PLAYER_POINTS\r\n  })\r\n}\r\n\r\nexport function appReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actionTypes.GENERATE_RANDOM_WORD:\r\n      return generateRandomWord(state, action);\r\n    case actionTypes.CHECK_GUESS_WORD:\r\n      return checkIfPlayerGuessTheWord(state, action);\r\n    case actionTypes.SAVE_DATA_SCORE_PLAYER:\r\n      return insertScorePlayerIntoScoreTable(state, action);\r\n    case actionTypes.RESET_LIFE_PLAYER:\r\n      return resetLifePlayer(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { appReducer } from './app';\r\n\r\nexport const rootReducer = () =>\r\n  combineReducers({\r\n    app: appReducer,\r\n  });\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { rootReducer } from './store/reducers';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(rootReducer(), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your App, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}